@use '../../styles/mixins' as mixins;
@use '../../styles/variables' as colors;
@use '../node-list/styles/variables';

// --- Toggle ---//

.node-list-row__toggle {
  cursor: pointer;

  &--kind-element {
    margin-right: 8px;
  }

  &--kind-element:nth-of-type(2) {
    margin: 0 8px 0 -8px;
  }

  &--disabled {
    display: none;
  }
}

@include mixins.transparentColour(
  '--row-selected-transparent',
  variables.$row-selected-light,
  variables.$row-selected-dark
);

.node-list-row__toggle--selected::before {
  opacity: 1;
}

.node-list-row__checkbox {
  @include mixins.screenReaderOnly;
}

// --- Toggle icon ---//

.node-list-row__toggle-icon {
  width: variables.$toggle-icon-size;
  height: variables.$toggle-icon-size;
  padding: variables.$toggle-icon-padding;
  border-radius: 50%;

  .node-list-row__checkbox:focus + & {
    outline: none;

    [data-whatintent='keyboard'] & {
      box-shadow: 0 0 0 3px colors.$blue-300 inset;
    }
  }
}

// There are two kinds of toggle icon, with different styling:
// 1. 'Element': Used on elements, and features a white/black eye
// 2. 'Filter': Used on categories, and features a blue square

// --- Toggle (kind=element) icon opacities ---//

/*
 | row-hover | icon-hover | checked | opacity |
 |    ðŸš«     |     ðŸš«      |    ðŸš«   |    0    |
 |    ðŸš«     |     ðŸš«      |    âœ…   |    1    |
 |    âœ…     |     ðŸš«      |    ðŸš«   |   0.55  |
 |    âœ…     |     ðŸš«      |    âœ…   |    1    |
 |    âœ…     |     âœ…      |    ðŸš«   |    1    |
 |    âœ…     |     âœ…      |    âœ…   |    1    |
 */

$element-icon-opacity-0: 0;
$element-icon-opacity-1: 0.55;
$element-icon-opacity-2: 1;

.node-list-row__toggle-icon--kind-element {
  // Change opacity on the SVG's child elements instead, in order to
  // maintain 100% opacity outline on parent SVG on keyboard focus
  > * {
    opacity: $element-icon-opacity-0;
  }

  .node-list-row:hover & {
    > * {
      opacity: $element-icon-opacity-1;
    }

    &.node-list-row__toggle-icon--focus-checked {
      > * {
        opacity: $element-icon-opacity-2;
      }
    }
  }

  .node-list-row &:hover {
    > * {
      opacity: $element-icon-opacity-2;
    }
  }

  [data-whatintent='keyboard'] input:focus + & {
    > * {
      opacity: $element-icon-opacity-1;
    }

    &.node-list-row__toggle-icon--checked {
      > * {
        opacity: $element-icon-opacity-2;
      }
    }
  }

  &.node-list-row__toggle-icon--focus-checked {
    > * {
      opacity: $element-icon-opacity-2;
    }
  }
}

// --- Toggle (kind=filter) icon opacities ---//

/*
 Parent (toggle all tags):
 | row-hover | icon-hover | checked | opacity |
 |    ðŸš«     |     ðŸš«      |    ðŸš«   |    0    |
 |    âœ…     |     ðŸš«      |    ðŸš«   |   0.3   |
 |    âœ…     |     âœ…      |    ðŸš«   |   0.55  |
 |    ðŸš«     |     ðŸš«      |    âœ…   |   0.55  |
 |    âœ…     |     âœ…      |    âœ…   |   0.75  |

 Child (individual tag):
 | row-hover | checked | opacity |
 |    ðŸš«     |    ðŸš«    |    0    |
 |    âœ…     |    ðŸš«    |   0.3   |
 |    ðŸš«     |    âœ…    |   0.55  |
 |    âœ…     |    âœ…    |   0.75  |
 */

$filter-icon-opacity-0: 0;
$filter-icon-opacity-1: 0.55;
$filter-icon-opacity-2: 0.9;
$filter-icon-opacity-3: 1;

.node-list-row__toggle-icon--kind-filter {
  // Change opacity on the SVG's child elements instead, in order to
  // maintain 100% opacity outline on parent SVG on keyboard focus
  > * {
    opacity: $filter-icon-opacity-1;
  }

  .pipeline-nodelist__heading &.node-list-row__toggle-icon--all-unchecked > * {
    opacity: $filter-icon-opacity-0;
  }

  &.node-list-row__toggle-icon--all-unchecked {
    > * {
      opacity: $filter-icon-opacity-1;
    }
  }

  .node-list-row:hover & {
    > * {
      opacity: $filter-icon-opacity-1;
    }
  }

  .node-list-row:hover & {
    &.node-list-row__toggle-icon--parent:hover {
      > * {
        opacity: $filter-icon-opacity-2;
      }
    }
  }

  .node-list-row & {
    &.node-list-row__toggle-icon--checked {
      > * {
        opacity: $filter-icon-opacity-2;
      }
    }
  }

  .node-list-row:hover & {
    &.node-list-row__toggle-icon--child {
      &.node-list-row__toggle-icon--checked {
        > * {
          opacity: $filter-icon-opacity-3;
        }
      }
    }
  }

  .node-list-row & {
    &.node-list-row__toggle-icon--parent:hover {
      &.node-list-row__toggle-icon--checked {
        > * {
          opacity: $filter-icon-opacity-3;
        }
      }
    }
  }

  [data-whatintent='keyboard'] input:focus + & {
    > * {
      opacity: $filter-icon-opacity-2;
    }

    &.node-list-row__toggle-icon--checked {
      > * {
        opacity: $filter-icon-opacity-3;
      }
    }
  }
}

// --- Toggle (kind=filter) icon fills and strokes ---//

.node-list-row__toggle-icon--kind-filter {
  &.node-list-row__toggle-icon--checked {
    fill: var(--color-nodelist-filter-indicator-on);
    stroke: var(--color-nodelist-filter-indicator-on);
  }

  &.node-list-row__toggle-icon--unchecked {
    fill: none;
    stroke: var(--color-nodelist-filter-indicator-off);
  }

  .node-list-row:hover &.node-list-row__toggle-icon--all-unchecked,
  &.node-list-row__toggle-icon--parent {
    fill: colors.$blue-300;
    stroke: colors.$blue-300;
  }
}
