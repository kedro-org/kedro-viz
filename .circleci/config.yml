version: 2.1

orbs:
  win: circleci/windows@2.4.0

executors:
  circleci_machine:
    docker:
      - image: cimg/node:14.15
    working_directory: ~/repo
  demo_executor:
    docker:
      - image: cimg/python:3.8

commands:
  setup_python_env:
    description: Setup Python environment
    steps:
      - run:
          name: Install python3.8
          command: |
            sudo apt-get install software-properties-common
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            sudo apt update
            sudo apt install python3.8 python3-pip python3-venv
      - run:
          name: Install Python environment
          command: |
            mkdir -p /home/circleci/.venvs && python3 -m venv /home/circleci/.venvs/kedro-viz
            echo "source /home/circleci/.venvs/kedro-viz/bin/activate" >> $BASH_ENV
      - run:
          name: Install Python dependencies
          command: |
            pip install git+https://github.com/kedro-org/kedro@main
            cd package && pip install -r requirements.txt -U
            pip install -r test_requirements.txt -U
            cd ..
      - run:
          name: Echo package versions
          command: |
            python -V
            pip -V
            kedro -V

  install_node_dependencies:
    steps:
      - run:
          name: Install Node dependencies
          command: npm install

  test_lib_transpilation:
    steps:
      - run:
          name: Test lib transpilation
          command: npm run lib

  test_lib_import:
    steps:
      - run:
          name: Test JS library imports
          command: |
            npm run lib-test:setup
            cd tools/test-lib/react-app
            npm run test:ci

  run_eslint:
    steps:
      - run:
          name: Run Eslint
          command: npm run lint

  run_javascript_tests:
    steps:
      - run:
          name: Run JavaScript tests
          command: npm run build:css && npm run test:ci

  run_python_format_and_lint:
    steps:
      - run:
          name: Run Python formatters and linters
          command: make format-check lint-check

  run_secret_scan:
    steps:
      - run:
          name: Run secret scan
          command: make secret-scan

  run_security_scan:
    steps:
      - run:
          name: Run security scan
          command: make security-scan

  run_python_tests:
    steps:
      - run:
          name: Run Python tests
          command: make pytest

  run_e2e_tests:
    steps:
      - run:
          name: Run all end to end tests
          command: make e2e-tests

  cleanup:
    steps:
      - run:
          name: Cleanup
          command: make clean

  build_npm_package:
    steps:
      - run:
          name: Build application
          command: npm run build

  package_app:
    steps:
      - run:
          name: Package app
          command: make package

  deploy_to_s3:
    steps:
      - checkout
      - restore_cache:
          keys:
            - v${CACHE_VERSION}-{{ arch }}-dependencies-{{ checksum "package.json" }}
            - v${CACHE_VERSION}-{{ arch }}-dependencies-
      - install_node_dependencies
      - build_npm_package
      - run:
          name: Install python3
          command: |
            sudo apt update
            sudo apt install python3 python3-pip
      - run:
          name: install_aw_cli
          command: pip3 install awscli
      - run:
          name: Publish to S3
          command: aws s3 cp --recursive build s3://kedro-viz-fe/${CIRCLE_BRANCH}

  deploy_demo:
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup environment
          command: |
            cd demo-project
            # use credentials for kedro-ecr-publish as the credentials in this job
            echo "AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID" >> $BASH_ENV
            echo "AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY" >> $BASH_ENV
            echo "AWS_ECR_URL=public.ecr.aws/g0x0s3o2/kedro-viz-live-demo" >> $BASH_ENV
            echo "KEDRO_VIZ_VERSION=$(cat .version)" >> $BASH_ENV
            echo "cd demo-project" >> $BASH_ENV
      - run:
          name: Install AWS CLI
          command: pip3 install awscli
      - run:
          name: Build demo container image
          command: |
            echo "kedro_viz==$KEDRO_VIZ_VERSION" >> src/docker_requirements.txt
            docker build -t $AWS_ECR_URL:$KEDRO_VIZ_VERSION .
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
            docker push $AWS_ECR_URL:$KEDRO_VIZ_VERSION
      - run:
          name: Create a new lightsail deployment
          command: |
            # install lightsail cli
            # run https://docs.aws.amazon.com/cli/latest/reference/lightsail/create-container-service-deployment.html#create-container-service-deployment
            aws lightsail create-container-service-deployment --region eu-west-2 --cli-input-json file://./lightsail.json

  build:
    description: Run build
    steps:
      - checkout
      - restore_cache:
          keys:
            - v${CACHE_VERSION}-{{ arch }}-dependencies-{{ checksum "package.json" }}-{{ checksum "package/requirements.txt" }}-{{ checksum "package/test_requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v${CACHE_VERSION}-{{ arch }}-dependencies-
      - setup_python_env
      - install_node_dependencies
      - save_cache:
          paths:
            - node_modules
            - /home/circleci/.venvs/kedro-viz
            - /home/circleci/.cache/pip/
          key: v${CACHE_VERSION}-{{ arch }}-dependencies-{{ checksum "package.json" }}-{{ checksum "package/requirements.txt" }}-{{ checksum "package/test_requirements.txt" }}
      - test_lib_transpilation
      - test_lib_import
      - run_eslint
      - run_javascript_tests
      - run_python_format_and_lint
      - run_secret_scan
      - run_security_scan
      - run_python_tests
      - run_e2e_tests
      - cleanup
      - build_npm_package
      - package_app

  # Windows-related commands
  win_setup_conda:
    # Miniconda3 is pre-installed on the machine:
    # https://circleci.com/docs/2.0/hello-world-windows/
    description: Setup conda
    steps:
      - run:
          name: Initialize conda
          command: conda init powershell
      - run:
          name: Create 'kedro-viz' conda environment
          command: |
            $condaEnvPath = "c:\tools\miniconda3\envs\kedro-viz\"
            if (-not (Test-Path $condaEnvPath)) { conda create --name kedro-viz python=$env:CONDA_ENV_PY_VERSION -y }

  win_setup_requirements:
    description: Install Python dependencies
    steps:
      - run:
          name: Install Kedro-Viz dependencies
          command: |
            conda activate kedro-viz
            python -m pip install -U pip setuptools wheel
            pip install git+https://github.com/kedro-org/kedro@main
            pip install -r package/test_requirements.txt -U
      - run:
          name: Echo package versions
          command: |
            conda activate kedro-viz
            python -V
            pip -V
            kedro -V

  win_build:
    description: Run build on Windows
    steps:
      - checkout
      - restore_cache:
          keys:
            - v${CACHE_VERSION}-{{ arch }}-dependencies-{{ checksum "package.json" }}-{{ checksum "package/requirements.txt" }}-{{ checksum "package/test_requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v${CACHE_VERSION}-{{ arch }}-dependencies-
      - win_setup_conda
      - win_setup_requirements
      - install_node_dependencies
      - save_cache:
          paths:
            - node_modules
            - c:\tools\miniconda3\envs\kedro-viz\
            - c:\users\circleci\appdata\local\pip\cache\
          key: v${CACHE_VERSION}-{{ arch }}-dependencies-{{ checksum "package.json" }}-{{ checksum "package/requirements.txt" }}-{{ checksum "package/test_requirements.txt" }}
      - run:
          name: Run Python unit tests
          command: |
            conda activate kedro-viz
            rm -r build, package/dist, package/kedro_viz/html, pip-wheel-metadata, package/kedro_viz.egg-info -ErrorAction Ignore
            npm run build
            cp -R build package/kedro_viz/html
            pytest package/tests --no-cov
      - run:
          name: Run e2e tests
          command: |
            conda activate kedro-viz
            cd package
            behave

jobs:
  build_37:
    executor: circleci_machine
    environment:
      CONDA_ENV_PY_VERSION: '3.7'
    steps: [build]

  build_38:
    executor: circleci_machine
    environment:
      CONDA_ENV_PY_VERSION: '3.8'
    steps: [build]

  deploy_demo:
    executor: demo_executor
    steps: [deploy_demo]

  deploy_s3:
    executor: circleci_machine
    steps: [deploy_to_s3]

  # Windows-related jobs
  win_build_37:
    executor: win/default
    working_directory: ~/repo
    environment:
      CONDA_ENV_PY_VERSION: '3.7'
    steps: [win_build]

  win_build_38:
    executor: win/default
    working_directory: ~/repo
    environment:
      CONDA_ENV_PY_VERSION: '3.8'
      NODE_OPTIONS: '--max-old-space-size=8192'
    steps: [win_build]

  release_to_npm:
    executor: circleci_machine
    description: Build Kedro-Viz as an npm package and push it to npm
    steps:
      - checkout
      - restore_cache:
          keys:
            - v${CACHE_VERSION}-{{ arch }}-dependencies-{{ checksum "package.json" }}
            - v${CACHE_VERSION}-{{ arch }}-dependencies-
      - install_node_dependencies
      - build_npm_package
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run:
          name: Publish to npm
          command: npm publish

  release_to_pypi:
    executor: circleci_machine
    description: Build Kedro-Viz as a Python package and push it to PyPI
    environment:
      CONDA_ENV_PY_VERSION: '3.8'
    steps:
      - checkout
      - restore_cache:
          keys:
            - v${CACHE_VERSION}-{{ arch }}-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v${CACHE_VERSION}-{{ arch }}-dependencies-
      - setup_python_env
      - run:
          name: Install twine
          command: python -m pip install -U twine
      - run:
          name: Build Python package
          command: make package
      - run:
          name: Publish to PyPI
          command: python -m twine upload package/dist/*

release_filter: &release_filter
  filters:
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
    branches:
      ignore: /.*/

workflows:
  version: 2
  build:
    jobs:
      # - build_37
      - build_38
      # - win_build_37
      - win_build_38
      - deploy_s3
      - deploy_demo:
          requires:
            # - build_37
            - build_38
            # - win_build_37
            - win_build_38
          filters:
            branches:
              only: demo
  daily:
    triggers:
      - schedule:
          cron: '0 1 * * *'
          filters:
            branches:
              only:
                - main
    jobs:
      # - build_37
      - build_38
      # - win_build_37
      - win_build_38

  release:
    jobs:
      - build_38:
          <<: *release_filter
      - release_to_npm:
          <<: *release_filter
      - release_to_pypi:
          <<: *release_filter
          requires:
            - build_38
