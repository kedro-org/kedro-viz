version: 2.1

# add parameters 

orbs:
  win: circleci/windows@2.4.1

# No windows executor is listed here since windows builds use win/default and modify
# the Python version through the conda environment.
executors:
  docker:
    parameters:
      python_version:
        type: string
    docker:
        - image: cimg/python:<<parameters.python_version>>-node
    working_directory: ~/repo

commands:
  setup_python_env:
    description: Setup Python environment
    steps:
      - run:
          name: Install Python
          command: python --version
      - run:
          name: Install Python dependencies
          command: |
            pip install git+https://github.com/kedro-org/kedro@main
            cd package && pip install -r requirements.txt -U
            pip install -r test_requirements.txt -U
            cd ..
      - run:
          name: Echo package versions
          command: |
            python -V
            pip -V
            kedro -V

  install_node_dependencies:
    steps:
      - run:
          name: Install Node dependencies
          command: npm install
  
  test_lib_transpilation:
    steps:
      - run:
          name: Test lib transpilation
          command: npm run lib

  test_lib_import:
    steps:
      - run:
          name: Test JS library imports
          command: |
            npm run lib-test:setup
            cd tools/test-lib/react-app
            npm run test:ci

  run_eslint:
    steps:
      - run:
          name: Run Eslint
          command: npm run lint

  run_javascript_tests:
    steps:
      - run:
          name: Run JavaScript tests
          command: npm run build:css && npm run test:ci

  run_python_tests:
    steps:
      - run:
          name: Run Python tests
          command: make pytest

  run_e2e_tests:
    steps:
      - run:
          name: Run all end to end tests
          command: make e2e-tests

  run_python_format_and_lint:
    steps:
      - run:
          name: Run Python formatters and linters
          command: make format-check lint-check

  run_secret_scan:
    steps:
      - run:
          name: Run secret scan
          command: make secret-scan

  run_security_scan:
    steps:
      - run:
          name: Run security scan
          command: make security-scan

  cleanup:
    steps:
      - run:
          name: Cleanup
          command: make clean

  build_npm_package:
    steps:
      - run:
          name: Build application
          command: npm run build

  package_app:
    steps:
      - run:
          name: Package app
          command: make package

  deploy_demo:
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup environment
          command: |
            cd demo-project
            echo "AWS_ECR_URL=public.ecr.aws/g0x0s3o2/kedro-viz-live-demo" >> $BASH_ENV
            echo "KEDRO_VIZ_VERSION=$(cat .version)" >> $BASH_ENV
            echo "cd demo-project" >> $BASH_ENV
      - run:
          name: Install AWS CLI
          command: pip3 install awscli
      - run:
          name: Build demo container image
          command: |
            echo "kedro_viz==$KEDRO_VIZ_VERSION" >> src/docker_requirements.txt
            docker build -t $AWS_ECR_URL:$KEDRO_VIZ_VERSION .
            aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
            docker push $AWS_ECR_URL:$KEDRO_VIZ_VERSION
      - run:
          name: Create a new lightsail deployment
          command: |
            # install lightsail cli
            # run https://docs.aws.amazon.com/cli/latest/reference/lightsail/create-container-service-deployment.html#create-container-service-deployment
            aws lightsail create-container-service-deployment --region eu-west-2 --cli-input-json file://./lightsail.json

  win_setup_conda:
    # Miniconda3 is pre-installed on the machine:
    # https://circleci.com/docs/2.0/hello-world-windows/
    description: Setup conda
    parameters:
      python_version:
        type: string
    steps:
      - run:
          name: Initialize conda
          command: conda init powershell
      - run:
          name: Create 'kedro-viz' conda environment
          command: conda create --name kedro-viz python=<<parameters.python_version>> -y

  win_setup_requirements:
    description: Install Python dependencies
    steps:
      - run:
          name: Install Kedro-Viz dependencies
          command: |
            conda activate kedro-viz
            python -m pip install -U pip setuptools wheel
            pip install git+https://github.com/kedro-org/kedro@main
            pip install -r package/test_requirements.txt -U
      - run:
          name: Echo package versions
          command: |
            conda activate kedro-viz
            python -V
            pip -V
            kedro -V

  run_win_python_tests:
    steps:
      - run:
          name: Run Python tests on Windows
          command: |
            conda activate kedro-viz
            rm -r build, package/dist, package/kedro_viz/html, pip-wheel-metadata, package/kedro_viz.egg-info -ErrorAction Ignore
            npm run build
            cp -R build package/kedro_viz/html
            pytest package/tests --no-cov

  run_win_e2e_tests:
    steps:
      - run:
          name: Run all end to end tests on Windows
          command: |
            conda activate kedro-viz
            cd package
            behave


jobs:
  e2e_tests:
    parameters:
      python_version:
        type: string
    executor:
      name: docker
      python_version: <<parameters.python_version>>
    steps:
      - setup_python_env
      - run_e2e_tests
  
  win_e2e_tests:
    parameters:
      python_version:
        type: string
    executor: win/default
    steps:
      - checkout
      - win_setup_conda:
          python_version: <<parameters.python_version>>
      - win_setup_requirements
      # - install_node_dependencies
      - run_win_e2e_tests

  unit_tests:
    parameters:
      python_version:
        type: string
    executor:
      name: docker
      python_version: <<parameters.python_version>>
    steps:
      - setup_python_env
      - run_python_tests

  win_unit_tests:
    parameters:
      python_version:
        type: string
    executor: win/default
    steps:
      - win_setup_conda:
          python_version: <<parameters.python_version>>
      - win_setup_requirements
      - run_win_python_tests

  
  lint:
    parameters:
      python_version:
        type: string
    executor:
      name: docker
      python_version: <<parameters.python_version>>
    steps:
      - setup_python_env
      - run_python_format_and_lint

  
  javascript_lint_and_tests:
    parameters:
      python_version:
        type: string
    executor:
      name: docker
      python_version: <<parameters.python_version>>
    description: Run javascript commands and tests
    steps:
      - checkout 
      - install_node_dependencies
      - test_lib_transpilation
      - test_lib_import
      - run_eslint
      - run_javascript_tests

  build_package: 
    parameters:
      python_version:
        type: string
    executor:
        name: docker
        python_version: <<parameters.python_version>>
    steps:
      - checkout
      - setup_python_env
      - install_node_dependencies
      - run_secret_scan
      - run_security_scan
      - cleanup
      - build_npm_package
      - package_app

  release_to_npm:
    executor:
      name: docker
      python_version: <<parameters.python_version>>
    description: Build Kedro-Viz as an npm package and push it to npm
    steps:
      - checkout
      - install_node_dependencies
      - build_npm_package
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run:
          name: Publish to npm
          command: npm publish

  release_to_pypi:
    executor:
      name: docker
      python_version: <<parameters.python_version>>
    description: Build Kedro-Viz as a Python package and push it to PyPI
    steps:
      - checkout
      - setup_python_env
      - install_node_dependencies
      - run:
          name: Install twine
          command: python -m pip install -U twine
      - run:
          name: Build Python package
          command: make package
      - run:
          name: Publish to PyPI
          command: python -m twine upload package/dist/*

release_filter: &release_filter
  filters:
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
    branches:
      ignore: /.*/

workflows:
  version: 2.1
  build: 
    jobs:
      - e2e_tests:
          matrix:
            parameters:
              python_version: ["3.7", "3.8", "3.9", "3.10"]
      - win_e2e_tests:
          matrix:
            parameters:
              python_version: ["3.7", "3.8", "3.9", "3.10"]
      - unit_tests:
          matrix:
            parameters:
              python_version: ["3.7", "3.8", "3.9", "3.10"]
      - win_unit_tests:
          matrix:
            parameters:
              python_version: ["3.7", "3.8", "3.9", "3.10"]
      - lint:
          matrix:
            parameters:
              python_version: ["3.7", "3.8", "3.9", "3.10"]
      - javascript_lint_and_tests:
          matrix:
              parameters:
                python_version: ["3.8"]
      - build_package:
          matrix:
            parameters:
              python_version: ["3.8"]

  # release:
  #   jobs:
  #     - build_package:
  #         <<: *release_filter
  #         matrix:
  #           parameters:
  #             python_version: ["3.8"]
  #     - release_to_npm:
  #         <<: *release_filter
  #         matrix:
  #           parameters:
  #             python_version: ["3.8"]
  #     - release_to_pypi:
  #         <<: *release_filter
  #         matrix:
  #           parameters:
  #             python_version: ["3.8"]
      
      



  



      
      






