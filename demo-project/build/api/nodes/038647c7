{
  "code": "def train_model(\n    X_train: pd.DataFrame, y_train: pd.Series, model_options: Dict[str, Any]\n) -> Tuple[BaseEstimator, Dict[str, Any]]:\n    \"\"\"Trains the linear regression model.\n\n    Args:\n        X_train: Training data of independent features.\n        y_train: Training data for price.\n\n    Returns:\n        Trained model.\n    \"\"\"\n\n    # Parse parameters\n    model_module = model_options.get(\"module\")\n    model_type = model_options.get(\"class\")\n    model_arguments = model_options.get(\"kwargs\")\n\n    # Import and instantiate Sklearn regressor object\n    regressor_class = getattr(importlib.import_module(model_module), model_type)\n    regressor_instance = regressor_class(**model_arguments)\n\n    logger = logging.getLogger(__name__)\n    logger.info(f\"Fitting model of type {type(regressor_instance)}\")\n\n    # Fit model\n    regressor_instance.fit(X_train, y_train)\n    flat_model_params = {**{\"model_type\": model_type}, **model_arguments}\n    return regressor_instance, flat_model_params\n",
  "filepath": "demo-project/src/demo_project/pipelines/modelling/nodes.py",
  "parameters": {
    "train_evaluation.model_options.random_forest": {
      "module": "sklearn.ensemble",
      "class": "RandomForestRegressor",
      "kwargs": {
        "n_estimators": 100,
        "criterion": "squared_error",
        "min_samples_split": 2,
        "min_samples_leaf": 1,
        "min_weight_fraction_leaf": 0,
        "max_features": 1.0,
        "min_impurity_decrease": 0,
        "bootstrap": true,
        "oob_score": false,
        "verbose": 0,
        "warm_start": false,
        "ccp_alpha": 0
      }
    }
  },
  "run_command": null,
  "inputs": [
    "X_train",
    "y_train",
    "params:train_evaluation.model_options.random_forest"
  ],
  "outputs": [
    "train_evaluation.random_forest.regressor",
    "train_evaluation.random_forest.experiment_params"
  ]
}